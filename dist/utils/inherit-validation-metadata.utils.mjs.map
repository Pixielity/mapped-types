{"version":3,"sources":["../../src/logger.ts","../../src/utils/logger.utils.ts","../../src/utils/inherit-validation-metadata.utils.ts"],"names":[],"mappings":"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","file":"inherit-validation-metadata.utils.mjs","sourcesContent":["/**\n * @class Logger\n * @description A simple logger class for logging messages with different log levels.\n * This class provides methods for logging messages with different severity levels\n * and includes the context (module name) in the log output.\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance with the specified context.\n   * @param context The context (usually module name) to include in log messages\n   */\n  constructor(private readonly context: string) {}\n\n  /**\n   * Logs an error message.\n   * @param message The message to log\n   * @param trace Optional stack trace or error object\n   */\n  error(message: any, trace?: string | Error): void {\n    const timestamp = new Date().toISOString()\n    const formattedMessage = `[${timestamp}] [ERROR] [${this.context}] ${message}`\n\n    console.error(formattedMessage)\n\n    if (trace) {\n      if (trace instanceof Error) {\n        console.error(trace.stack)\n      } else {\n        console.error(trace)\n      }\n    }\n  }\n\n  /**\n   * Logs a warning message.\n   * @param message The message to log\n   */\n  warn(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.warn(`[${timestamp}] [WARN] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs an informational message.\n   * @param message The message to log\n   */\n  info(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.info(`[${timestamp}] [INFO] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs a debug message.\n   * @param message The message to log\n   */\n  debug(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.debug(`[${timestamp}] [DEBUG] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs a verbose message.\n   * @param message The message to log\n   */\n  verbose(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.log(`[${timestamp}] [VERBOSE] [${this.context}] ${message}`)\n  }\n}\n","import { Logger } from '../logger'\n\n/**\n * @description Centralized logger instance for the MappedTypes module.\n * Used to log errors and other information during the execution of the module.\n * This logger provides consistent formatting and context for all log messages.\n *\n * @example\n * ```typescript\n * // Log an error message\n * logger.error('An error occurred while processing metadata');\n *\n * // Log an error with a stack trace\n * try {\n *   // Some code that might throw\n * } catch (err) {\n *   logger.error('Failed to process metadata', err);\n * }\n * ```\n */\nexport const logger = new Logger('MappedTypes')\n","import 'reflect-metadata'\n\nimport type { Type } from '../types'\nimport { logger } from './logger.utils'\n\n/**\n * @function inheritValidationMetadata\n * @description Inherits validation metadata from a parent class to a target class.\n * This allows the target class to have the same validation rules as the parent class.\n * If class-validator is not available, this function does nothing.\n *\n * @param parentClass - The class to inherit validation metadata from\n * @param targetClass - The class to apply the inherited validation metadata to\n * @param isPropertyInherited - Optional function to determine if a property should be inherited\n *\n * @returns {string[] | undefined} An array of property names that had validation metadata applied,\n *                                or undefined if class-validator is not available or an error occurred\n *\n * @example\n * ```typescript\n * class UserDto {\n *   @IsString()\n *   name: string;\n * }\n *\n * class CreateUserDto {\n *   // This class will inherit the validation metadata for the name property\n * }\n *\n * inheritValidationMetadata(UserDto, CreateUserDto);\n * ```\n */\nexport function inheritValidationMetadata(\n  parentClass: Type<any>,\n  targetClass: Function,\n  isPropertyInherited?: (key: string) => boolean,\n) {\n  // Check if class-validator is available in the project\n  if (!isClassValidatorAvailable()) {\n    return\n  }\n\n  try {\n    // Import class-validator dynamically\n    const classValidator: typeof import('class-validator') = require('class-validator')\n\n    // Get the metadata storage from class-validator\n    // This handles different versions of class-validator\n    const metadataStorage: import('class-validator').MetadataStorage = (classValidator as any)\n      .getMetadataStorage\n      ? (classValidator as any).getMetadataStorage()\n      : classValidator.getFromContainer(classValidator.MetadataStorage)\n\n    // Arguments for getting target validation metadata\n    const getTargetValidationMetadatasArgs = [parentClass, null!, false, false]\n\n    // Get the validation metadata from the parent class\n    const targetMetadata: ReturnType<typeof metadataStorage.getTargetValidationMetadatas> = (\n      metadataStorage.getTargetValidationMetadatas as Function\n    )(...getTargetValidationMetadatasArgs)\n\n    // Filter and map the metadata to apply to the target class\n    return (\n      targetMetadata\n        // Only include properties that should be inherited\n        .filter(({ propertyName }) => !isPropertyInherited || isPropertyInherited(propertyName))\n        .map((value) => {\n          // Get the original type metadata\n          const originalType = Reflect.getMetadata(\n            'design:type',\n            parentClass.prototype,\n            value.propertyName,\n          )\n\n          // If the original type exists, define it on the target class\n          if (originalType) {\n            Reflect.defineMetadata(\n              'design:type',\n              originalType,\n              targetClass.prototype,\n              value.propertyName,\n            )\n          }\n\n          // Add the validation metadata to the target class\n          metadataStorage.addValidationMetadata({\n            ...value,\n            target: targetClass,\n          })\n\n          // Return the property name that was processed\n          return value.propertyName\n        })\n    )\n  } catch (err: Error | any) {\n    // Log errors that occur during the inheritance process\n    logger.error(\n      `Validation (\"class-validator\") metadata cannot be inherited for \"${parentClass.name}\" class.`,\n    )\n    logger.error(err)\n  }\n}\n\n/**\n * @function isClassValidatorAvailable\n * @description Checks if the class-validator package is available in the project.\n * This is used to gracefully handle cases where class-validator is not installed.\n *\n * @returns {boolean} True if class-validator is available, false otherwise\n *\n * @internal\n */\nfunction isClassValidatorAvailable() {\n  try {\n    // Attempt to require class-validator\n    require('class-validator')\n    return true\n  } catch {\n    // Return false if class-validator is not available\n    return false\n  }\n}\n"]}