{"version":3,"sources":["../../src/utils/inherit-property-initializers.utils.ts"],"names":[],"mappings":";;;AAyBO,SAAS,4BACd,MACA,EAAA,WAAA,EAEA,mBAAsB,GAAA,CAAC,QAAgB,IACvC,EAAA;AACA,EAAI,IAAA;AAEF,IAAM,MAAA,YAAA,GAAe,IAAI,WAAY,EAAA;AAGrC,IAAM,MAAA,aAAA,GAAgB,MAAO,CAAA,mBAAA,CAAoB,YAAY,CAAA;AAG7D,IAEG,aAAA,CAAA,MAAA;AAAA,MACC,CAAC,YACC,KAAA,OAAO,YAAa,CAAA,YAAY,MAAM,WACtC,IAAA,OAAO,MAAO,CAAA,YAAY,CAAM,KAAA;AAAA,KACpC,CAEC,MAAO,CAAA,CAAC,YAAiB,KAAA,mBAAA,CAAoB,YAAY,CAAC,CAAA,CAE1D,OAAQ,CAAA,CAAC,YAAiB,KAAA;AACzB,MAAO,MAAA,CAAA,YAAY,CAAI,GAAA,YAAA,CAAa,YAAY,CAAA;AAAA,KACjD,CAAA;AAAA,GACG,CAAA,OAAA,CAAA,EAAA;AAAA;AAIV","file":"inherit-property-initializers.utils.js","sourcesContent":["import type { Type } from '../types'\n\n/**\n * @function inheritPropertyInitializers\n * @description Inherits property initializers from a source class to a target object.\n * This copies the default values of properties from an instance of the source class\n * to the target object, but only for properties that are undefined in the target.\n *\n * @param target - The target object to inherit property initializers to\n * @param sourceClass - The source class to inherit property initializers from\n * @param isPropertyInherited - Optional function to determine if a property should be inherited\n *                             (defaults to inheriting all properties)\n *\n * @example\n * ```typescript\n * class UserDto {\n *   name: string = 'Default Name';\n *   isActive: boolean = true;\n * }\n *\n * const target = {};\n * inheritPropertyInitializers(target, UserDto);\n * // target is now { name: 'Default Name', isActive: true }\n * ```\n */\nexport function inheritPropertyInitializers(\n  target: Record<string, any>,\n  sourceClass: Type<any>,\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  isPropertyInherited = (key: string) => true,\n) {\n  try {\n    // Create a temporary instance of the source class to get its property values\n    const tempInstance = new sourceClass()\n\n    // Get all property names from the temporary instance\n    const propertyNames = Object.getOwnPropertyNames(tempInstance)\n\n    // Filter and copy properties\n    propertyNames\n      // Only include properties that are defined in the source and undefined in the target\n      .filter(\n        (propertyName) =>\n          typeof tempInstance[propertyName] !== 'undefined' &&\n          typeof target[propertyName] === 'undefined',\n      )\n      // Only include properties that should be inherited according to the predicate\n      .filter((propertyName) => isPropertyInherited(propertyName))\n      // Copy each property from the source to the target\n      .forEach((propertyName) => {\n        target[propertyName] = tempInstance[propertyName]\n      })\n  } catch {\n    // Ignore errors that might occur during instantiation or property copying\n    // This allows the function to fail gracefully if the source class can't be instantiated\n  }\n}\n"]}