{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":";;;AAMO,IAAM,SAAN,MAAa;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,YAA6B,OAAiB,EAAA;AAAjB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA;AAAA;AAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/C,KAAA,CAAM,SAAc,KAA8B,EAAA;AAChD,IAAA,MAAM,SAAY,GAAA,iBAAA,IAAI,IAAK,EAAA,EAAE,WAAY,EAAA;AACzC,IAAA,MAAM,mBAAmB,CAAI,CAAA,EAAA,SAAS,cAAc,IAAK,CAAA,OAAO,KAAK,OAAO,CAAA,CAAA;AAE5E,IAAA,OAAA,CAAQ,MAAM,gBAAgB,CAAA;AAE9B,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,IAAI,iBAAiB,KAAO,EAAA;AAC1B,QAAQ,OAAA,CAAA,KAAA,CAAM,MAAM,KAAK,CAAA;AAAA,OACpB,MAAA;AACL,QAAA,OAAA,CAAQ,MAAM,KAAK,CAAA;AAAA;AACrB;AACF;AACF;AAAA;AAAA;AAAA;AAAA,EAMA,KAAK,OAAoB,EAAA;AACvB,IAAA,MAAM,SAAY,GAAA,iBAAA,IAAI,IAAK,EAAA,EAAE,WAAY,EAAA;AACzC,IAAQ,OAAA,CAAA,IAAA,CAAK,IAAI,SAAS,CAAA,UAAA,EAAa,KAAK,OAAO,CAAA,EAAA,EAAK,OAAO,CAAE,CAAA,CAAA;AAAA;AACnE;AAAA;AAAA;AAAA;AAAA,EAMA,KAAK,OAAoB,EAAA;AACvB,IAAA,MAAM,SAAY,GAAA,iBAAA,IAAI,IAAK,EAAA,EAAE,WAAY,EAAA;AACzC,IAAQ,OAAA,CAAA,IAAA,CAAK,IAAI,SAAS,CAAA,UAAA,EAAa,KAAK,OAAO,CAAA,EAAA,EAAK,OAAO,CAAE,CAAA,CAAA;AAAA;AACnE;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,OAAoB,EAAA;AACxB,IAAA,MAAM,SAAY,GAAA,iBAAA,IAAI,IAAK,EAAA,EAAE,WAAY,EAAA;AACzC,IAAQ,OAAA,CAAA,KAAA,CAAM,IAAI,SAAS,CAAA,WAAA,EAAc,KAAK,OAAO,CAAA,EAAA,EAAK,OAAO,CAAE,CAAA,CAAA;AAAA;AACrE;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,OAAoB,EAAA;AAC1B,IAAA,MAAM,SAAY,GAAA,iBAAA,IAAI,IAAK,EAAA,EAAE,WAAY,EAAA;AACzC,IAAQ,OAAA,CAAA,GAAA,CAAI,IAAI,SAAS,CAAA,aAAA,EAAgB,KAAK,OAAO,CAAA,EAAA,EAAK,OAAO,CAAE,CAAA,CAAA;AAAA;AAEvE","file":"logger.js","sourcesContent":["/**\n * @class Logger\n * @description A simple logger class for logging messages with different log levels.\n * This class provides methods for logging messages with different severity levels\n * and includes the context (module name) in the log output.\n */\nexport class Logger {\n  /**\n   * Creates a new Logger instance with the specified context.\n   * @param context The context (usually module name) to include in log messages\n   */\n  constructor(private readonly context: string) {}\n\n  /**\n   * Logs an error message.\n   * @param message The message to log\n   * @param trace Optional stack trace or error object\n   */\n  error(message: any, trace?: string | Error): void {\n    const timestamp = new Date().toISOString()\n    const formattedMessage = `[${timestamp}] [ERROR] [${this.context}] ${message}`\n\n    console.error(formattedMessage)\n\n    if (trace) {\n      if (trace instanceof Error) {\n        console.error(trace.stack)\n      } else {\n        console.error(trace)\n      }\n    }\n  }\n\n  /**\n   * Logs a warning message.\n   * @param message The message to log\n   */\n  warn(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.warn(`[${timestamp}] [WARN] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs an informational message.\n   * @param message The message to log\n   */\n  info(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.info(`[${timestamp}] [INFO] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs a debug message.\n   * @param message The message to log\n   */\n  debug(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.debug(`[${timestamp}] [DEBUG] [${this.context}] ${message}`)\n  }\n\n  /**\n   * Logs a verbose message.\n   * @param message The message to log\n   */\n  verbose(message: any): void {\n    const timestamp = new Date().toISOString()\n    console.log(`[${timestamp}] [VERBOSE] [${this.context}] ${message}`)\n  }\n}\n"]}